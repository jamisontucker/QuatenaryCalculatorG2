Index: src/srcwork/UI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\r\nimport java.awt.*;\r\n\r\npublic class UI {\r\n\r\n    private JTextField textField;\r\n    private String currentOp;\r\n    private String firstOperand;\r\n    private boolean isDecimal; // Toggle between quaternary and decimal display\r\n    private String lastQuaternaryResult; // Store the last quaternary result\r\n\r\n    public UI() {\r\n\r\n        JFrame frame = new JFrame();\r\n        textField = new JTextField();\r\n        currentOp = \"\";\r\n        firstOperand = \"\";\r\n        isDecimal = false; // Initially show results in quaternary\r\n        lastQuaternaryResult = \"\"; // Initialize the last quaternary result\r\n\r\n        JButton button0 = new JButton(\"0\");\r\n        JButton button1 = new JButton(\"1\");\r\n        JButton button2 = new JButton(\"2\");\r\n        JButton button3 = new JButton(\"3\");\r\n        JButton buttonPlus = new JButton(\"+\");\r\n        JButton buttonSub = new JButton(\"-\");\r\n        JButton buttonMul = new JButton(\"x\");\r\n        JButton buttonDiv = new JButton(\"/\");\r\n        JButton buttonSquare = new JButton(\"²\");\r\n        JButton buttonSquareRoot = new JButton(\"√\");\r\n        JButton buttonClear = new JButton(\"C\");\r\n        JButton buttonEqu = new JButton(\"=\");\r\n        JButton buttonToggle = new JButton(\"Quaternary/Decimal\");\r\n\r\n        JPanel panelT = new JPanel();\r\n        panelT.setBorder(BorderFactory.createEmptyBorder(30, 30, 0, 30));\r\n        panelT.setLayout(new GridLayout(0, 1));\r\n        panelT.add(textField);\r\n\r\n        JPanel panelB = new JPanel();\r\n        panelB.setBorder(BorderFactory.createEmptyBorder(10, 30, 20, 30));\r\n        panelB.setLayout(new GridLayout(0, 4));\r\n        panelB.add(button0);\r\n        panelB.add(button1);\r\n        panelB.add(button2);\r\n        panelB.add(button3);\r\n        panelB.add(buttonPlus);\r\n        panelB.add(buttonSub);\r\n        panelB.add(buttonMul);\r\n        panelB.add(buttonDiv);\r\n        panelB.add(buttonSquare);\r\n        panelB.add(buttonSquareRoot);\r\n        panelB.add(buttonClear);\r\n        panelB.add(buttonEqu);\r\n\r\n        // Add toggle button\r\n        JPanel panelToggle = new JPanel();\r\n        panelToggle.setBorder(BorderFactory.createEmptyBorder(0, 30, 0, 30));\r\n        panelToggle.setLayout(new GridLayout(0, 1));\r\n        panelToggle.add(buttonToggle);\r\n\r\n        // Add action listeners to buttons\r\n        button0.addActionListener(e -> appendDigit(\"0\"));\r\n        button1.addActionListener(e -> appendDigit(\"1\"));\r\n        button2.addActionListener(e -> appendDigit(\"2\"));\r\n        button3.addActionListener(e -> appendDigit(\"3\"));\r\n        buttonPlus.addActionListener(e -> setOperation(\"+\"));\r\n        buttonSub.addActionListener(e -> setOperation(\"-\"));\r\n        buttonMul.addActionListener(e -> setOperation(\"x\"));\r\n        buttonDiv.addActionListener(e -> setOperation(\"/\"));\r\n        buttonSquare.addActionListener(e -> square());\r\n        //buttonSquareRoot.addActionListener(e -> squareRoot());\r\n        buttonClear.addActionListener(e -> clear());\r\n        buttonEqu.addActionListener(e -> calculate());\r\n\r\n        // Toggle button between quaternary and decimal display\r\n        buttonToggle.addActionListener(e -> toggleDisplay());\r\n\r\n        frame.add(panelT, BorderLayout.PAGE_START);\r\n        frame.add(panelToggle, BorderLayout.CENTER);\r\n        frame.add(panelB, BorderLayout.PAGE_END);\r\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        frame.setTitle(\"Quaternary Calculator\");\r\n        frame.pack();\r\n        frame.setVisible(true);\r\n    }\r\n\r\n    private void appendDigit(String digit) {\r\n        textField.setText(textField.getText() + digit);\r\n    }\r\n\r\n    private void setOperation(String operation) {\r\n        firstOperand = textField.getText();\r\n        currentOp = operation;\r\n        textField.setText(\"\");\r\n    }\r\n\r\n    private void calculate() {\r\n        String secondOperand = textField.getText();\r\n        String result = \"\";\r\n\r\n        switch (currentOp) {\r\n            case \"+\":\r\n                result = Calculator.add(firstOperand, secondOperand);\r\n                break;\r\n            case \"-\":\r\n                result = Calculator.subtract(firstOperand, secondOperand);\r\n                break;\r\n            case \"x\":\r\n                result = Calculator.multiply(firstOperand, secondOperand);\r\n                break;\r\n            case \"/\":\r\n                result = Calculator.divide(firstOperand, secondOperand);\r\n                break;\r\n        }\r\n\r\n        lastQuaternaryResult = result; // Store the quaternary result\r\n\r\n        if (isDecimal) {\r\n            result = Calculator.quaternaryToDecimal(result);\r\n        }\r\n\r\n        textField.setText(result);\r\n    }\r\n\r\n    private void clear() {\r\n        textField.setText(\"\");\r\n        firstOperand = \"\";\r\n        currentOp = \"\";\r\n        lastQuaternaryResult = \"\";\r\n    }\r\n\r\n    private void square() {\r\n        String operand = textField.getText();\r\n        String result = Calculator.multiply(operand, operand);\r\n        lastQuaternaryResult = result; // Store the quaternary result\r\n        if (isDecimal) {\r\n            result = Calculator.quaternaryToDecimal(result);\r\n        }\r\n        textField.setText(result);\r\n    }\r\n\r\n    //private void squareRoot() {\r\n    //    String operand = textField.getText();\r\n    //    String result = Calculator.quaternarySquareRoot(operand);\r\n    //    lastQuaternaryResult = result; // Store the quaternary result\r\n    //    if (isDecimal) {\r\n    //        result = Calculator.quaternaryToDecimal(result);\r\n    //    }\r\n    //    textField.setText(result);\r\n    //}\r\n\r\n    // Toggle between quaternary and decimal display\r\n    private void toggleDisplay() {\r\n        if (!lastQuaternaryResult.isEmpty()) {\r\n            isDecimal = !isDecimal;\r\n            String currentText = textField.getText();\r\n            if (isDecimal) {\r\n                textField.setText(Calculator.quaternaryToDecimal(lastQuaternaryResult));\r\n            } else {\r\n                textField.setText(lastQuaternaryResult);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        new UI();\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/srcwork/UI.java b/src/srcwork/UI.java
--- a/src/srcwork/UI.java	(revision d3aeb4d8997d5d5b393389f2a5d111f1eb8e0e96)
+++ b/src/srcwork/UI.java	(date 1725566792768)
@@ -1,6 +1,7 @@
 import javax.swing.*;
 import java.awt.*;
 
+
 public class UI {
 
     private JTextField textField;
Index: src/srcwork/Calculator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>public class Calculator {\r\n\r\n    // Quaternary to Decimal\r\n    public static String quaternaryToDecimal(String quaternary) {\r\n        int decimal = Integer.parseInt(quaternary, 4);\r\n        return String.valueOf(decimal);\r\n    }\r\n    public static String add(String a, String b) {\r\n        StringBuilder result = new StringBuilder();\r\n        int carry = 0;\r\n        int maxLength = Math.max(a.length(), b.length());\r\n\r\n        // Padding shorter string with leading zeros\r\n        a = String.format(\"%\" + maxLength + \"s\", a).replace(' ', '0');\r\n        b = String.format(\"%\" + maxLength + \"s\", b).replace(' ', '0');\r\n\r\n        for (int i = maxLength - 1; i >= 0; i--) {\r\n            int digitA = a.charAt(i) - '0';\r\n            int digitB = b.charAt(i) - '0';\r\n            int sum = digitA + digitB + carry;\r\n            carry = sum / 4;\r\n            result.insert(0, sum % 4);\r\n        }\r\n\r\n        if (carry > 0) {\r\n            result.insert(0, carry);\r\n        }\r\n\r\n        return result.toString();\r\n    }\r\n\r\n    public static String subtract(String a, String b) {\r\n        StringBuilder result = new StringBuilder();\r\n        int borrow = 0;\r\n        int maxLength = Math.max(a.length(), b.length());\r\n\r\n        // Padding shorter string with leading zeros\r\n        a = String.format(\"%\" + maxLength + \"s\", a).replace(' ', '0');\r\n        b = String.format(\"%\" + maxLength + \"s\", b).replace(' ', '0');\r\n\r\n        for (int i = maxLength - 1; i >= 0; i--) {\r\n            int digitA = a.charAt(i) - '0';\r\n            int digitB = b.charAt(i) - '0' + borrow;\r\n            if (digitA < digitB) {\r\n                digitA += 4;\r\n                borrow = 1;\r\n            } else {\r\n                borrow = 0;\r\n            }\r\n            result.insert(0, digitA - digitB);\r\n        }\r\n\r\n        // Remove leading zeros\r\n        while (result.length() > 1 && result.charAt(0) == '0') {\r\n            result.deleteCharAt(0);\r\n        }\r\n\r\n        return result.toString();\r\n    }\r\n\r\n    public static String multiply(String a, String b) {\r\n        String result = \"0\";\r\n        int shift = 0;\r\n\r\n        for (int i = b.length() - 1; i >= 0; i--) {\r\n            StringBuilder temp = new StringBuilder();\r\n            int carry = 0;\r\n            int digitB = b.charAt(i) - '0';\r\n\r\n            for (int j = a.length() - 1; j >= 0; j--) {\r\n                int digitA = a.charAt(j) - '0';\r\n                int product = digitA * digitB + carry;\r\n                carry = product / 4;\r\n                temp.insert(0, product % 4);\r\n            }\r\n\r\n            if (carry > 0) {\r\n                temp.insert(0, carry);\r\n            }\r\n\r\n            // Shift the result based on the position of the digit in 'b'\r\n            for (int k = 0; k < shift; k++) {\r\n                temp.append(\"0\");\r\n            }\r\n\r\n            result = add(result, temp.toString());\r\n            shift++;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public static String divide(String a, String b) {\r\n        if (b.equals(\"0\")) {\r\n            return \"Error: Division by zero\";\r\n        }\r\n\r\n        String quotient = \"0\";\r\n        String remainder = a;\r\n\r\n        while (compareQuaternary(remainder, b) >= 0) {\r\n            String tempQuotient = \"1\";\r\n            String tempB = b;\r\n\r\n            while (compareQuaternary(multiply(tempB, \"2\"), remainder) <= 0) {\r\n                tempB = multiply(tempB, \"2\");\r\n                tempQuotient = multiply(tempQuotient, \"2\");\r\n            }\r\n\r\n            remainder = subtract(remainder, tempB);\r\n            quotient = add(quotient, tempQuotient);\r\n        }\r\n\r\n        return quotient;\r\n    }\r\n\r\n    private static int compareQuaternary(String a, String b) {\r\n        a = a.replaceFirst(\"^0+\", \"\");\r\n        b = b.replaceFirst(\"^0+\", \"\");\r\n\r\n        if (a.length() != b.length()) {\r\n            return a.length() - b.length();\r\n        }\r\n\r\n        return a.compareTo(b);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/srcwork/Calculator.java b/src/srcwork/Calculator.java
--- a/src/srcwork/Calculator.java	(revision d3aeb4d8997d5d5b393389f2a5d111f1eb8e0e96)
+++ b/src/srcwork/Calculator.java	(date 1725565800345)
@@ -1,3 +1,6 @@
+
+
+
 public class Calculator {
 
     // Quaternary to Decimal
